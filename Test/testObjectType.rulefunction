/**
 * @description 
 */
void rulefunction Test.testObjectType {
	attribute {
		validity = ACTION;
	}
	scope {
		
	}
	body {
		Concepts.PrimitiveItem pItem = RuleFunctions.CreateObject.createPrimitiveItem(
			"first" /*aString String */,
			true /*aBoolean boolean */,
			1 /*anInt int */,
			1 /*aLong long */,
			1.0 /*aDouble double */,
			DateTime.now() /*aDateTime DateTime */);
		Concepts.PrimitiveArrayItem paItem = RuleFunctions.CreateObject.createPrimitiveArrayItem(
			"first" /*aString String */,
			true /*aBoolean boolean */,
			1 /*anInt int */,
			1 /*aLong long */,
			1.0 /*aDouble double */,
			DateTime.now() /*aDateTime DateTime */);
		Concepts.SingleItems sItem = RuleFunctions.CreateObject.createSingleItems(
			paItem /*aPrimitiveArrayItem Concepts.PrimitiveArrayItem */,
			pItem /*aPrimitiveItem Concepts.PrimitiveItem */);
		Concepts.ListItems lItem = RuleFunctions.CreateObject.createListItems(
			paItem /*aPrimitiveArrayItem Concepts.PrimitiveArrayItem */,
			pItem /*aPrimitiveItem Concepts.PrimitiveItem */);
		Concepts.Container con = RuleFunctions.CreateObject.createContainer(
			sItem /*aSingleItems Concepts.SingleItems */,
			lItem /*aListItems Concepts.ListItems */);
		String type = inspectEntity(con);
		type = inspectEntity(sItem);
		type = inspectEntity(lItem);
		type = inspectEntity(paItem);
		type = inspectEntity(pItem);
		assertThat("check container type", con, instanceOf("/Concepts/Container"));
		assertThat("check datetime", pItem.aDateTime, instanceOf("DateTime"));
		
		Events.PrimitiveEvent evt = Events.PrimitiveEvent.PrimitiveEvent(
			null /*extId String */,
			null /*payload String */,
			"first" /*aString String */,
			true /*aBoolean boolean */,
			1 /*anInt int */,
			1L /*aLong long */,
			1.0 /*aDouble double */,
			DateTime.now() /*aDateTime DateTime */);
		type = inspectEntity(evt);
		assertThat("check event type", evt, instanceOf("/Events/PrimitiveEvent"));
	}
}