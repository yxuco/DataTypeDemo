/**
 * @description Process a timer event for a scheduled test. 
 *              if the test is in preprocessor context, send a trigger event to start a test.
 *              if the test is in rule context, invoke the test function directly.
 * @author Yueming Xu
 */
rule testservice.TestScheduler.StartScheduledTest {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		testservice.TestScheduler.TestTimer timer;
	}
	when {
		
	}
	then {
		Object logger = Log.getLogger("testservice.TestScheduler.StartScheduledTest");
		Log.log(logger, "info", "Start test of %s", timer@closure);
		if (String.startsWith(timer@closure, "rule:")) {
			String func = String.substringAfter(timer@closure, "rule:");
			Log.log(logger, "info", "Invoke test %s in rules context", func);
			Engine.invokeRuleFunction(func, null);
		}
		else if (String.startsWith(timer@closure, "preproc:")) {
			String func = String.substringAfter(timer@closure, "preproc:");
			Log.log(logger, "info", "Send event trigger for preproc test %s", func);
			Event.sendEvent(testservice.TestScheduler.PreprocTestTrigger.PreprocTestTrigger(
				null /*extId String */,
				"" /*payload String */,
				func /*functionName String */));
		}
		else {
			Log.log(logger, "warn", "invalid closure in test timer: %s", timer@closure);
		}
	}
}